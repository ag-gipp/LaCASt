createListOfTestCases[vars_, vals_] := Tuples[Table[tmp1 -> tmp2, {tmp1, vars}, {tmp2, vals}]]

mapConstraints[vars_, vals_] := Module[
    {tmp},
    tmp := {};
    Do[
        Module[{},
            AppendTo[tmp, {Part[vars, i] -> Part[vals, i]}];
        ], {i, Length[vars]}];
    Return[{Flatten[tmp]}]
]

filterTestCases[ass_, tests_, max_] := Select[tests, ReplaceAll[And @@ ass, #]&, max]

filterGlobalAssumptions[ass_, vars_] := Select[ass, MemberQ[vars, Part[Reduce`FreeVariables[#],1]]&]

numericalAutoTest[expr_, tests_, threshold_] :=
    Module[{results, output},
        results := N[ReplaceAll[expr, tests]];
        output := {};
        Do[
            Module[{},
                If[
                    Check[
                        Abs[Part[results, i]] > threshold
                    , True],
                    AppendTo[output, {Part[results, i], Part[tests, i]}]
                ]
            ], {i, Length[tests]}];
        Return[output]
    ]

createTestCases[vars_, vals_, constVars_, constVals_, extraVars_, extraVals_] := Module[
    {varsF, constT, extraT, testCases},
    varsF := Complement[vars, constVars, extraVars];
    extraT := createListOfTestCases[Complement[Intersection[extraVars, vars], constVars], extraVals];
    constT := mapConstraints[constVars, constVals];
    varsT := createListOfTestCases[varsF, vals];
    Which[
        And[Length[Flatten[extraT]] == 0, Length[Flatten[constT]] == 0],
            Return[varsT],
        And[Length[Flatten[extraT]] > 0, Length[Flatten[constT]] == 0],
            Return[Flatten[Table[Union[tmp1, tmp2], {tmp1, varsT}, {tmp2, extraT}], 1]],
        And[Length[Flatten[extraT]] == 0, Length[Flatten[constT]] > 0],
            Return[Flatten[Table[Union[tmp1, tmp2], {tmp1, varsT}, {tmp2, constT}], 1]],
        And[Length[Flatten[extraT]] > 0, Length[Flatten[constT]] > 0],
            Return[Flatten[Table[Union[tmp1, tmp2, tmp3], {tmp1, varsT}, {tmp2, constT}, {tmp3, extraT}], 2]]
    ]
]