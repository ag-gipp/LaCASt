with(combinat,cartprod):

createListInList := proc(var::set, values::list)
  return [seq(`if`(nops(createListOfValues(v,values))>0, createListOfValues(v,values), NULL), v in var)];
end proc:

createListOfValues := proc(var, values::list)
  return [seq(`if`(coulditbe(var = evalf(val)), var = val, NULL), val in values)];
end proc:

NumericalTester := proc(expr, values::list, threshold::numeric, precision::posint)
  local combi, combo, result, output;
  output := NULL;
  if nops(values) = 1 then
    return innerTesterMethod(expr, op(values), threshold, precision);
  end if;
  combi := cartprod(values);
  while not combi[finished] do
    combo := combi[nextvalue]();
    # strange, the following line destroys the algebraic callback in linux -> comment this line
    #printf("Next test values: %q\n", combo);
    try
      result := evalf[precision](eval(expr, combo));
      if abs(result-1) > threshold then
        output := output,[result, combo];
      end if;
    catch:
	  printf("Error for test case %q; Message: %q", combo, lastexception);
	  return lastexception;
    end try;
  end do;
  printf("Done");
  return [output];
end proc:

innerTesterMethod := proc(expr, values::list, threshold::numeric, precision::posint)
  local result, output, i;
  output := NULL;
  for i from 1 to nops(values) do
    # strange, the following line destroys the algebraic callback in linux -> comment this line
    #printf("Next test values: %q\n", values[i]);
    try
      result := evalf[precision](eval(expr, values[i]));
      if abs(result-1) > threshold then
        output := output,[result, values[i]];
      end if;
    catch:
	  return lastexception;
    end try;
  end do;
  return [output];
end proc:

SpecialNumericalTester := proc(expr, values::list, precision::posint)
  local combi, combo, result, output;
  output := NULL;
  if type(expr, numeric) then
    return [[expr, "allValues"]];
  end if;
  if nops(values) = 0 then
    return NULL;
  end if;
  if nops(values) = 1 then
    return SpecialInnerTesterMethod(expr, op(values), precision);
  end if;
  combi := cartprod(values);
  while not combi[finished] do
    combo := combi[nextvalue]();
    # strange, the following line destroys the algebraic callback in linux -> comment this line
    #printf("Next test values: %q\n", combo);
    try
      result := evalf[precision](eval(expr, combo));
      output := output,[result, combo];
    catch:
	  printf("Error for test case %q; Message: %q", combo, lastexception);
	  return lastexception;
    end try;
  end do;
  printf("Done");
  return [output];
end proc:

SpecialInnerTesterMethod := proc(expr, values::list, precision::posint)
  local result, output, i;
  output := NULL;
  for i from 1 to nops(values) do
    # strange, the following line destroys the algebraic callback in linux -> comment this line
    #printf("Next test values: %q\n", values[i]);
    try
      result := evalf[precision](eval(expr, values[i]));
      output := output,[result, values[i]];
    catch:
	  return lastexception;
    end try;
  end do;
  return [output];
end proc: