# Properties file to perform numerical tests.

# Set the path to the DLMF dataset, in my case it was lessformulas.txt
dlmf_dataset=/mnt/SharedPartition/Private/MAPrivate/lessformulas.txt

# Set the path to the file that defines label to DLMF links. In my case the name of the file was BruceLabelLinks.txt
dlmf_labelset=/mnt/SharedPartition/Private/MAPrivate/BruceLabelLinks.txt

# Set the path for the output file. This will create (and overwrite existing) file that will contains the overview
# information for numerical tests.
output=/home/andreg-p/results1.txt

# Enables or disables the DLMF link for each line in the output file. Use "true" or "false".
show_dlmf_links=false

# Define which lines from the dlmf_dataset you want to use for your numerical tests.
# The first line number is 1 (not 0) and start is included, while the end is excluded.
# For example: subset_tests=5,100 will perform numerical tests for the lines 5, 6, ..., 98, 99.
subset_tests=2,15

# Define the numerical values you want to test in a list in Maple's 2D input format.
# Note that, if a formula contain multiple variables, such as 'x' and 'y' than the numerical tests
# will perform each combination of variable-value.
# For example, if the formula contains the variables 'x' and 'y' and you set numerical_values=[1,2],
# then the algorithm will test the values: x=1,y=1; x=2,y=1; x=1,y=2; x=2,y=2;
# As an example for 8 values on the unit circle:
# numerical_values=[1, sqrt(2)+sqrt(2)*I, I, sqrt(2)-sqrt(2)*I, -1, -sqrt(2)-sqrt(2)*I, -I, -sqrt(2)+sqrt(2)*I]
numerical_values=[1, sqrt(2)+sqrt(2)*I, I, sqrt(2)-sqrt(2)*I, -1, -sqrt(2)-sqrt(2)*I, -I, -sqrt(2)+sqrt(2)*I]

# ---------------------------------------------------------------------------------------------------------------- #
# In the following you have to specify what you want to test.
# The #LHS, #RHS, #RESULT and #THRESHOLD are placeholders that will be replaced at runtime buy the corresponding values.

# How you want to compare the LHS and RHS. Typical use cases are (#LHS)/(#RHS) or (#LHS)-(#RHS).
test_expression=(#LHS)/(#RHS)

# In some cases, one of the sides is 0. To handle issues with "division by zero" correctly, you should provide
# special test expressions for both cases.
test_if_rhs_null=#LHS+1
test_if_lhs_null=#RHS+1

# Define the expected outcome for each value. For example, in case of (#LHS)/(#RHS), the expected value is 1 (+/- machine accuracy).
# In case of (#LHS)-(#RHS), you would test for abs(#RESULT) < #THRESHOLD
test_expectation=abs(#RESULT - 1) < #THRESHOLD

# Define the threshold for your tests (floating point value)
test_threshold=0.001

# Define the accuracy that Maple should use for evaluations (integer, high number may increase time)
test_precision=15
